// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package yahb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson700d804fDecodeGithubComKrecuYahb(in *jlexer.Lexer, out *Place) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "placementId":
			out.PlacementId = string(in.String())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]Size, 0, 4)
					} else {
						out.Sizes = []Size{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Size
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Sizes = append(out.Sizes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson700d804fEncodeGithubComKrecuYahb(out *jwriter.Writer, in Place) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.PlacementId != "" {
		const prefix string = ",\"placementId\":"
		out.RawString(prefix)
		out.String(string(in.PlacementId))
	}
	if len(in.Sizes) != 0 {
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Sizes {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson700d804fEncodeGithubComKrecuYahb1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Place) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson700d804fEncodeGithubComKrecuYahb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Place) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson700d804fEncodeGithubComKrecuYahb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Place) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson700d804fDecodeGithubComKrecuYahb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Place) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson700d804fDecodeGithubComKrecuYahb(l, v)
}
func easyjson700d804fDecodeGithubComKrecuYahb1(in *jlexer.Lexer, out *Size) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson700d804fEncodeGithubComKrecuYahb1(out *jwriter.Writer, in Size) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Width != 0 {
		const prefix string = ",\"width\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Width))
	}
	if in.Height != 0 {
		const prefix string = ",\"height\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}
